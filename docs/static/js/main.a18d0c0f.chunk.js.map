{"version":3,"sources":["components/profile/index.js","logs/directives/index.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","useState","index","setIndex","typing","Typewriter","document","getElementById","loop","delay","typeString","panelComponent","title","pauseFor","start","body","useEffect","className","onChange","i","renderThumbs","map","d","src","media","id","App","style","float","width","directives","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wSAgEeA,MA1Df,SAAcC,GAAQ,IAAD,EACOC,mBAAS,GADhB,mBACZC,EADY,KACLC,EADK,KAyBnB,SAASC,IArBY,IAAIC,IAAWC,SAASC,eAAe,cAAe,CACvEC,MAAM,EACNC,MAAO,KAGRC,WAAWV,EAAMW,eAAeT,GAAOU,OACvCC,SAAS,KACTC,QAIkB,IAAIT,IAAWC,SAASC,eAAe,aAAc,CACtEC,MAAM,EACNC,MAAO,KAGRC,WAAWV,EAAMW,eAAeT,GAAOa,MACvCF,SAAS,KACTC,QAgBH,OARAE,qBAAU,WACRZ,MACC,IAEHY,qBAAU,WACRZ,MACC,CAACF,IAGF,6BACE,yBAAKe,UAAU,oBACb,kBAAC,WAAD,CACEC,SAAU,SAASC,GAAKhB,EAASgB,IACjCC,aAAc,WACZ,MAAO,KAGRpB,EAAMW,eAAeU,KAAI,SAACC,GAAQ,OAAO,yBAAKC,IAAOD,EAAEE,aAI5D,yBAAKP,UAAU,mBACb,wBAAIQ,GAAK,eACT,uBAAGA,GAAK,iBC3DD,G,MAAA,CACd,CAAE,MAAS,6DAA8D,MAAS,0BAA2B,KAAQ,mMACrH,CAAE,MAAS,6DAA8D,MAAS,gCAAiC,KAAQ,sDAC3H,CAAE,MAAS,6DAA8D,MAAS,iCAAkC,KAAQ,2KAC5H,CAAE,MAAS,6DAA8D,MAAS,0BAA2B,KAAQ,4GACrH,CAAE,MAAS,6DAA8D,MAAS,kBAAmB,KAAQ,6GAC7G,CAAE,MAAS,6DAA8D,MAAS,8BAA+B,KAAQ,2KCkB3GC,MAnBf,WAEE,OACE,6BACA,qDACA,yBAAKC,MAAO,CAAEC,MAAO,OAAQC,MAAO,SAClC,yBAAKZ,UAAU,OACb,0FACA,2GAEF,kBAAC,EAAD,CACEN,eAAgBmB,OCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SDyHpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a18d0c0f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport Typewriter from 'typewriter-effect/dist/core';\nimport css from \"./index.css\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { Carousel } from \"react-responsive-carousel\";\n\nfunction Main(props) {\n  const [index, setIndex] = useState(0);\n\n  function titleEffect() {\n    const typewriter = new Typewriter(document.getElementById(\"panelTitle\"), {\n      loop: false,\n      delay: 75,\n    });\n    typewriter\n    .typeString(props.panelComponent[index].title)\n    .pauseFor(1000)\n    .start();\n  }\n\n  function bodyEffect() {\n    const typewriter = new Typewriter(document.getElementById(\"panelBody\"), {\n      loop: false,\n      delay: 75,\n    });\n    typewriter\n    .typeString(props.panelComponent[index].body)\n    .pauseFor(1000)\n    .start();\n  }\n\n  function typing() {\n    titleEffect();\n    bodyEffect();\n  }\n\n  useEffect(() => {\n    typing();\n  }, []);\n\n  useEffect(() => {\n    typing();\n  }, [index]);\n\n  return (\n    <div>\n      <div className=\"box peddapViewer\">\n        <Carousel\n          onChange={function(i) { setIndex(i); }}\n          renderThumbs={() => {\n            return [];\n          }}\n        >\n          {props.panelComponent.map((d) => { return <img src = {d.media}/> })}\n        </Carousel>\n      </div>\n\n      <div className=\"box peddapPanel\">\n        <h2 id = \"panelTitle\"></h2>\n        <p id = \"panelBody\"></p>\n      </div>\n    </div>\n  );\n}\nexport default Main;\n","export default [\n\t{ \"media\": \"https://g.foolcdn.com/editorial/images/616486/square01.jpg\", \"title\": \"The universe is my bae.\", \"body\": \"Not long ago in a lucid dream, I was embraced by the universe. We spooned, obviously since I'm much smaller I took little spoon (we're just really good friends) but that's beside the point...\" },\n\t{ \"media\": \"https://g.foolcdn.com/editorial/images/616486/square01.jpg\", \"title\": \"Seriously we're just friends.\", \"body\": \"The universe spoke three fundamental directives...\" },\n\t{ \"media\": \"https://g.foolcdn.com/editorial/images/616486/square01.jpg\", \"title\": \"I'm not religious or whatever.\", \"body\": \"I. Liberate every woman and man from external governing entities by decentralizing energy, food and housing using automation and technological process improvements....\" },\n\t{ \"media\": \"https://g.foolcdn.com/editorial/images/616486/square01.jpg\", \"title\": \"I'm not a psychologist.\", \"body\": \"II. Improve the processes in which we perceive our world with innovations in psychological techniques...\" },\n\t{ \"media\": \"https://g.foolcdn.com/editorial/images/616486/square01.jpg\", \"title\": \"Evolution baby!\", \"body\": \"III. Design a world that is aligned with the individualistic biological reward system of woman and man...\" },\n\t{ \"media\": \"https://g.foolcdn.com/editorial/images/616486/square01.jpg\", \"title\": \"What the hell does it mean?\", \"body\": \"I woke up with a hangover and was literally covered with hair of the dog since we sleep on the same couch. As for dream interpretation your guess is as good as mine.\" }\n]\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { Profile } from \"./components\";\nimport './styles';\nimport directives from \"./logs/directives\";\n\nfunction App() {\n\n  return (\n    <div>\n    <h3>Jackson Thomas Elfers</h3>\n    <div style={{ float: \"left\", width: \"100%\" }}>\n      <div className=\"box\">\n        <h2>They used to call me \"Doubting Thomas\" at catholic school.</h2>\n        <p>When she asks me about my future I say I prefer them over stocks and bonds.</p>\n      </div>\n      <Profile\n        panelComponent={directives}\n      />\n    </div>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}